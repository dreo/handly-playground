Handly Examples
===============

This document describes how to obtain, set up, and run examples 
for the Eclipse Handly project:

- https://projects.eclipse.org/projects/technology.handly

File paths listed here are relative to the working directory of 
your local clone of the Handly git repository, unless otherwise noted.

Please see the `CONTRIBUTING` file for general information on 
how to contribute to the project.

Obtaining examples
------------------

Currently, you need to obtain sources in order to be able to use the examples. 
In other words, you need an up-to-date clone of the Handly git repository. 
Check out the `master` branch.

Setting up a workspace for examples
-----------------------------------

### Eclipse installation ###

You'll need an Xtext-enabled Eclipse installation. Note that the version of 
Xtext in the installation must match the version used in the examples' 
target platform for code generation to work right.

A simple way to achieve this is to install an Eclipse SDK and then install 
everything else from the file `toolkit.p2f` in the `examples/tools` folder. 
Just import the file via `Import...`, `Install Software Items from File`.

Alternatively, you could use the prepackaged Eclipse IDE for Java and DSL 
Developers of an appropriate version:

- http://www.eclipse.org/downloads/

### Setting up workspace preferences ###

Handly currently uses `JavaSE-1.6` for compilation. Please add a matching JRE. 
Perfect match (i.e. JDK 1.6) is recommended to avoid build warnings.

Handly employs specific code formatting conventions. Although not required 
to make use of the examples, it's probably a good idea to import the formatter 
profile from `tools/formatter.xml` into the workspace, because you may want 
to contribute something in the future.

### Importing projects into the workspace ###

You need to import all projects from the `examples` folder of the repo. 
In the future, the target platform definition for Handly Examples may include 
an appropiate integration build of the Handly Framework, but currently, 
you also need to import the following projects from the root of the repo:

- `org.eclipse.handly`
- `org.eclipse.handly.ui`
- `org.eclipse.handly.xtext`
- `org.eclipse.handly.xtext.ui`

### Setting up the workspace's target platform ###

Open the file `default.target` from the `target` project with the 
Target Editor and, after the target definition is resolved, click on 
`Set as Target Platform`.

Now every project in the workspace should compile without errors or warnings.

Running examples
----------------

You are ready to go now. The predefined `Launch Runtime Eclipse` launch 
configuration can be used to try examples out. Also, there are some predefined 
launch configurations for running automated tests for exemplary implementations.

### Basic example ###

The basic example (`o.e.handly.example.basic*`) demonstrates a full-featured 
Handly-based model for a simple Xtext-based language, complete with automated 
tests, content outline, and a CNF-based navigator view.

Launch runtime Eclipse and open the Resource perspective, then create 
a new project using the `Foo Project` wizard. (The wizard is in the 
`Foo` category.)

Create a new file in the root of the project you've just created; the filename 
must have the `.foo` extension. For example, create the `Module1.foo` file 
with the following contents:

var x;
var y;
def f() {}
def f(x) {}
def f(x, y) {}

Play with the Handly-based Outline view a little.

Open the `Foo Navigator` view (under the `Foo` category) and give it a try. 
Don't forget to expand Foo source files to see their inner elements, 
and try out the `Link with Editor` functionality. Edit a Foo file and 
see how changes in its inner structure are reflected in the Foo Navigator 
alongside the Outline view. (The navigator view is based on CNF and Handly.)

Now you might want to study the implementation. It is probably a good idea 
to begin with `o.e.handly.example.basic.core.tests` (that can be run with 
the same-named predefined launch configuration) and work from there toward 
`o.e.handly.example.basic.core`. Then you might want to look at how UI is 
implemented in `o.e.handly.example.basic.ui`.